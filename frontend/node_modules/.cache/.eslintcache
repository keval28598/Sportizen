[{"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\index.js":"1","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\App.js":"2","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\header.js":"4","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\footer.js":"5","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Footer.js":"6","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Header.js":"7","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\HomeScreen.js":"8","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\products.js":"9","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Product.js":"10","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Rating.js":"11","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProductScreen.js":"12","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\store.js":"13","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\productReducers.js":"14","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Message.js":"15","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Loader.js":"16","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\productActions.js":"17","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\productConstants.js":"18","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\CartScreen.js":"19","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\cartReducers.js":"20","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\cartConstants.js":"21","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\cartActions.js":"22","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\userReducers.js":"23","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\LoginScreen.js":"24","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\userConstants.js":"25","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\userActions.js":"26","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\RegisterScreen.js":"27","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\FormContainer.js":"28","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProfileScreen.js":"29","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ShippingScreen.js":"30","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\CheckoutSteps.js":"31","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\PaymentScreen.js":"32","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\PlaceOrderScreen.js":"33","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\orderAction.js":"34","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\orderConstants.js":"35","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\orderReducers.js":"36","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\OrderScreen.js":"37","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\UserListScreen.js":"38","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\UserEditScreen.js":"39","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProductListScreen.js":"40","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProductEditScreen.js":"41","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\OrderListScreen.js":"42","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\ProductCarousel.js":"43","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Meta.js":"44","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\config.js":"45"},{"size":403,"mtime":1637039557525,"results":"46","hashOfConfig":"47"},{"size":2649,"mtime":1638157118152,"results":"48","hashOfConfig":"47"},{"size":362,"mtime":1635984556299,"results":"49","hashOfConfig":"47"},{"size":709,"mtime":1636008324280,"results":"50","hashOfConfig":"51"},{"size":377,"mtime":1636006915347,"results":"52","hashOfConfig":"51"},{"size":392,"mtime":1638087089856,"results":"53","hashOfConfig":"47"},{"size":2387,"mtime":1638157356798,"results":"54","hashOfConfig":"47"},{"size":1447,"mtime":1638140453061,"results":"55","hashOfConfig":"47"},{"size":3895,"mtime":1636469051845,"results":"56","hashOfConfig":"51"},{"size":1088,"mtime":1638165530805,"results":"57","hashOfConfig":"47"},{"size":2097,"mtime":1637645302068,"results":"58","hashOfConfig":"47"},{"size":7653,"mtime":1638154126472,"results":"59","hashOfConfig":"47"},{"size":2409,"mtime":1638156495253,"results":"60","hashOfConfig":"47"},{"size":3642,"mtime":1637991193761,"results":"61","hashOfConfig":"47"},{"size":323,"mtime":1636914452645,"results":"62","hashOfConfig":"47"},{"size":481,"mtime":1637039486337,"results":"63","hashOfConfig":"47"},{"size":5293,"mtime":1638159520533,"results":"64","hashOfConfig":"47"},{"size":1545,"mtime":1637991148762,"results":"65","hashOfConfig":"47"},{"size":3842,"mtime":1638156789819,"results":"66","hashOfConfig":"47"},{"size":1181,"mtime":1638156949466,"results":"67","hashOfConfig":"47"},{"size":236,"mtime":1638156521450,"results":"68","hashOfConfig":"47"},{"size":1333,"mtime":1638156523703,"results":"69","hashOfConfig":"47"},{"size":3489,"mtime":1637824898540,"results":"70","hashOfConfig":"47"},{"size":2633,"mtime":1637503679734,"results":"71","hashOfConfig":"47"},{"size":1525,"mtime":1637824863665,"results":"72","hashOfConfig":"47"},{"size":6367,"mtime":1638154027216,"results":"73","hashOfConfig":"47"},{"size":3292,"mtime":1637503875446,"results":"74","hashOfConfig":"47"},{"size":345,"mtime":1637503482278,"results":"75","hashOfConfig":"47"},{"size":5968,"mtime":1638154131897,"results":"76","hashOfConfig":"47"},{"size":2687,"mtime":1637827340218,"results":"77","hashOfConfig":"47"},{"size":1428,"mtime":1637555749273,"results":"78","hashOfConfig":"47"},{"size":1885,"mtime":1637557015554,"results":"79","hashOfConfig":"47"},{"size":5303,"mtime":1637737514990,"results":"80","hashOfConfig":"47"},{"size":5208,"mtime":1638153985550,"results":"81","hashOfConfig":"47"},{"size":1229,"mtime":1637981006482,"results":"82","hashOfConfig":"47"},{"size":3447,"mtime":1637981006486,"results":"83","hashOfConfig":"47"},{"size":7628,"mtime":1638154095046,"results":"84","hashOfConfig":"47"},{"size":2868,"mtime":1637827315918,"results":"85","hashOfConfig":"47"},{"size":3269,"mtime":1637825638246,"results":"86","hashOfConfig":"47"},{"size":3845,"mtime":1638154119460,"results":"87","hashOfConfig":"47"},{"size":6346,"mtime":1638159826446,"results":"88","hashOfConfig":"47"},{"size":2586,"mtime":1638153085162,"results":"89","hashOfConfig":"47"},{"size":1308,"mtime":1638165562961,"results":"90","hashOfConfig":"47"},{"size":512,"mtime":1638140319111,"results":"91","hashOfConfig":"47"},{"size":70,"mtime":1638164889276,"results":"92","hashOfConfig":"47"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13xzfoo",{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qfm2u6",{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\index.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\App.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\header.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\footer.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Header.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\HomeScreen.js",["197","198"],"import React, { useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { Helmet } from 'react-helmet'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {Row,Col} from 'react-bootstrap';\r\nimport Product from '../components/Product';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport Meta from '../components/Meta'\r\nimport { listProducts } from '../actions/productActions'\r\n//import axios from 'axios';\r\n\r\nconst HomeScreen = () => {\r\n    const { keyword } = useParams();\r\n    //const [products, setProducts] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products } = productList \r\n\r\n    useEffect(() => {\r\n      dispatch(listProducts())\r\n    },[dispatch])\r\n\r\n    return (\r\n        <>\r\n        <Meta />\r\n       {!keyword && <ProductCarousel />}\r\n        <h1>Product Lineup</h1>\r\n        {loading ? \r\n        ( <Loader/> )\r\n        : error ? \r\n        ( <Message variant='danger'>{error} </Message>)\r\n        : <Row>\r\n            {products.map((product)=>(\r\n                <Col key={product._id} sm={12} md={6} lg={4} xl={3} >\r\n                <Product product={product} />\r\n                </Col>\r\n            ))}\r\n        </Row>}\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\products.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Product.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProductScreen.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\store.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Message.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\productActions.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\LoginScreen.js",["199"],"import React,{useState,useEffect} from 'react'\r\nimport { Form,Button, Row, Col } from 'react-bootstrap'\r\nimport { Link,useLocation } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormConatiner from '../components/FormContainer'\r\nimport { login } from '../actions/userActions'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n\r\n\r\nconst LoginScreen = ({history}) => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch()\r\n    const userLogin= useSelector(state =>state.userLogin)\r\n    const {loading, error, userInfo} = userLogin\r\n    \r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    useEffect(()=> {\r\n        if (userInfo){\r\n            navigate(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(email,password))\r\n    }\r\n    return (\r\n        <FormConatiner>\r\n            <h1>\r\n                Sign In\r\n            </h1>\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label className='m-1'>Email Address</Form.Label>\r\n                    <Form.Control type='email' placeholder='Enter Email' value={email}\r\n                    onChange = {(e) => setEmail(e.target.value) }></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label className='m-1'>Password</Form.Label>\r\n                    <Form.Control type='password' placeholder='Enter Password' value={password}\r\n                    onChange = {(e) => setPassword(e.target.value) } className='m-1'></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type= 'submit' variant = 'primary' className='m-3'>\r\n                    Sign In \r\n                </Button>\r\n\r\n\r\n            </Form>\r\n\r\n            <Row className = 'py-3'>\r\n                <Col className='m-1'>\r\n                    New Customer? {' '}\r\n                    <Link to = { redirect ? `/register?redirect=${redirect}` : '/register'}>\r\n                    Register\r\n                    </Link>\r\n                </Col>\r\n                </Row>\r\n            \r\n        </FormConatiner>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\userActions.js",["200"],"import axios from \"axios\";\r\nimport {\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_RESET,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_LIST_RESET,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n} from \"../constants/userConstants\";\r\n\r\nimport {ORDER_LIST_MY_RESET} from \"../constants/orderConstants\";\r\nimport process from '../config';\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const {data} = await axios.post(\r\n      `${process.env.API_URL}/api/users/login`,\r\n      {email, password},\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem(\"userInfo\");\r\n  dispatch({type: USER_LOGOUT});\r\n  dispatch({type: USER_DETAILS_RESET});\r\n  dispatch({type: ORDER_LIST_MY_RESET});\r\n  dispatch({ type: USER_LIST_RESET })\r\n};\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const {data} = await axios.post(\r\n      `${process.env.API_URL}/api/users`,\r\n      {name, email, password},\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_REGISTER_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DETAILS_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: {userInfo},\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const {data} = await axios.get(\r\n      `${process.env.API_URL}/api/users/${id}`,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: {userInfo},\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const {data} = await axios.put(\r\n      `${process.env.API_URL}/api/users/profile`,\r\n      user,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LIST_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: {userInfo},\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const {data} = await axios.get(`${process.env.API_URL}/api/users`, config);\r\n\r\n    dispatch({\r\n      type: USER_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DELETE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.delete(`${process.env.API_URL}/api/users/${id}`, config)\r\n\r\n    dispatch({ type: USER_DELETE_SUCCESS })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(`${process.env.API_URL}/api/users/${user._id}`, user, config)\r\n\r\n    dispatch({ type: USER_UPDATE_SUCCESS })\r\n\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\RegisterScreen.js",["201","202"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\n\r\nconst RegisterScreen = ({  }) => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userRegister = useSelector((state) => state.userRegister)\r\n  const { loading, error, userInfo } = userRegister\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      navigate(redirect)\r\n    }\r\n  }, [userInfo, redirect])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    if (password !== confirmPassword) {\r\n      setMessage('Passwords do not match')\r\n    } else {\r\n      dispatch(register(name, email, password))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FormContainer>\r\n      <h1>Sign Up</h1>\r\n      {message && <Message variant='danger'>{message}</Message>}\r\n      {error && <Message variant='danger'>{error}</Message>}\r\n      {loading && <Loader />}\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId='name'>\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type='name'\r\n            placeholder='Enter name'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='email'>\r\n          <Form.Label>Email Address</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Enter email'\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='password'>\r\n          <Form.Label>Password Address</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Enter password'\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='confirmPassword'>\r\n          <Form.Label>Confirm Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Confirm password'\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Button type='submit' variant='primary'>\r\n          Register\r\n        </Button>\r\n      </Form>\r\n\r\n      <Row className='py-3'>\r\n        <Col>\r\n          Have an Account?{' '}\r\n          <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n            Login\r\n          </Link>\r\n        </Col>\r\n      </Row>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default RegisterScreen","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProfileScreen.js",["203","204","205","206"],"import React, {useState, useEffect} from \"react\";\r\nimport {Link, useLocation, useNavigate} from \"react-router-dom\";\r\nimport {Table, Form, Button, Row, Col, ListGroup} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\nimport {getUserDetails, updateUserProfile} from \"../actions/userActions\";\r\nimport {listMyOrders} from \"../actions/orderAction\";\r\nimport process from '../config';\r\n\r\nconst ProfileScreen = ({}) => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const {loading, error, user} = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const {userInfo} = userLogin;\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const {success} = userUpdateProfile;\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy);\r\n  const {loading: loadingOrders, error: errorOrders, orders} = orderListMy;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      navigate(\"/login\");\r\n    } else {\r\n      if (!user.name) {\r\n        dispatch(getUserDetails(\"profile\"));\r\n        dispatch(listMyOrders());\r\n      } else {\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n      }\r\n    }\r\n  }, [dispatch, userInfo, user]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) {\r\n      setMessage(\"Passwords do not match\");\r\n    } else {\r\n      dispatch(updateUserProfile({id: user._id, name, email, password}));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>User Profile</h2>\r\n        {message && <Message variant=\"danger\">{message}</Message>}\r\n        {error && <Message variant=\"danger\">{error}</Message>}\r\n        {success && <Message variant=\"success\">Profile Updated</Message>}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n          <Form.Group controlId=\"name\">\r\n            <Form.Label className=\"m-2\">Name</Form.Label>\r\n            <Form.Control\r\n              type=\"name\"\r\n              placeholder=\"Enter name\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"email\">\r\n            <Form.Label className=\"m-2\">Email Address</Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              placeholder=\"Enter email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"password\">\r\n            <Form.Label className=\"m-2\">Password </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Enter password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"confirmPassword\">\r\n            <Form.Label className=\"m-2\">Confirm Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Confirm password\"\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Button type=\"submit\" variant=\"primary\" className=\"m-3\">\r\n            Update\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n      <Col md={9}>\r\n        <h2> My Orders </h2>\r\n        {loadingOrders ? (\r\n          <Loader />\r\n        ) : errorOrders ? (\r\n          <Message variant=\"danger\">{errorOrders}</Message>\r\n        ) : (\r\n          <Table striped bordered hover responsive className=\"table-sm\">\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td>{order._id}</td>\r\n                  <td>{order.createdAt.substring(0, 10)}</td>\r\n                  <td>{order.totalPrice}</td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className=\"fas fa-times\" style={{color: \"red\"}}></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className=\"fas fa-times\" style={{color: \"red\"}}></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <Link to={`${process.env.API_URL}/orders/${order._id}`}>\r\n                    <Button className=\"btn-sm\" variant=\"light\">\r\n                          Details\r\n                        </Button>\r\n                    </Link>\r\n                    {/* <ListGroup>\r\n                      <ListGroup.Item>\r\n                        <Button className=\"btn-sm\" variant=\"light\">\r\n                          Details\r\n                        </Button>\r\n                      </ListGroup.Item>\r\n                    </ListGroup> */}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ShippingScreen.js",["207"],"import React, { useState } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ShippingScreen = ({  }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress } = cart\r\n  const navigate = useNavigate();\r\n\r\n  const [address, setAddress] = useState(shippingAddress.address)\r\n  const [city, setCity] = useState(shippingAddress.city)\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n  const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n    navigate('/payment')\r\n  }\r\n\r\n  return (\r\n    <FormContainer>\r\n      <CheckoutSteps step1 step2 />\r\n      <h1>Shipping</h1>\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId='address'>\r\n          <Form.Label>Address</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Enter address'\r\n            value={address}\r\n            required\r\n            onChange={(e) => setAddress(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='city'>\r\n          <Form.Label>City</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Enter city'\r\n            value={city}\r\n            required\r\n            onChange={(e) => setCity(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='postalCode'>\r\n          <Form.Label>Postal Code</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Enter postal code'\r\n            value={postalCode}\r\n            required\r\n            onChange={(e) => setPostalCode(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='country'>\r\n          <Form.Label>Country</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Enter country'\r\n            value={country}\r\n            required\r\n            onChange={(e) => setCountry(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n       \r\n        \r\n        <Button type='submit' variant='primary'>\r\n          Continue\r\n        </Button>\r\n       \r\n      </Form>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default ShippingScreen","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\PlaceOrderScreen.js",["208"],"import React, {useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderAction'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n\r\n\r\nconst PlaceOrderScreen = () => {\r\n\r\n  const cart = useSelector((state) => state.cart)  \r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate();\r\n\r\n  //   Calculate prices\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2)\r\n  }\r\n\r\n  cart.itemsPrice = addDecimals(\r\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n  )\r\n\r\n\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2)\r\n  const orderCreate = useSelector((state) => state.orderCreate)\r\n  const { order, success, error } = orderCreate\r\n\r\n  useEffect(() => {\r\n\r\n    if (success) {\r\n      navigate(`/order/${order._id}`)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [success])\r\n\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    )\r\n\r\n  const placeOrderHandler = () => {\r\n    console.log('order')\r\n  }\r\n\r\n\r\n}\r\n\r\nreturn (\r\n    <>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong>Address:</strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city}{' '}\r\n                {cart.shippingAddress.postalCode},{' '}\r\n                {cart.shippingAddress.country}\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Payment Method</h2>\r\n              <strong>Method: </strong>\r\n              {cart.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>${cart.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>${cart.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>${cart.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>${cart.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block'\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  Place Order\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )}\r\n\r\nexport default PlaceOrderScreen","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\actions\\orderAction.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\OrderScreen.js",["209"],"import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport {PayPalButton} from \"react-paypal-button-v2\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {Row, Col, ListGroup, Image, Card} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\nimport {getOrderDetails, payOrder, deliverOrder} from \"../actions/orderAction\";\r\nimport {\r\n  ORDER_PAY_RESET,\r\n  ORDER_DELIVER_RESET,\r\n} from \"../constants/orderConstants\";\r\nimport Button from \"@restart/ui/esm/Button\";\r\nimport process from '../config';\r\n\r\nconst OrderScreen = ({history}) => {\r\n  const {id} = useParams();\r\n\r\n  const [sdkReady, setSdkReady] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const {order, loading, error} = orderDetails;\r\n\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const {loading: loadingPay, success: successPay} = orderPay;\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver);\r\n  const {loading: loadingDeliver, success: successDeliver} = orderDeliver;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const {userInfo} = userLogin;\r\n\r\n\r\n  if (!loading) {\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2);\r\n    };\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push(\"/login\");\r\n    }\r\n\r\n    const addPayPalScript = async () => {\r\n      const {data: clientId} = await axios.get(\r\n        `${process.env.API_URL}/api/config/paypal`\r\n      );\r\n      const script = document.createElement(\"script\");\r\n      script.type = \"text/javascript\";\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\r\n      script.async = true;\r\n      script.onload = () => {\r\n        setSdkReady(true);\r\n      };\r\n      document.body.appendChild(script);\r\n    };\r\n    if (!order || successPay || successDeliver) {\r\n      dispatch({type: ORDER_PAY_RESET});\r\n      dispatch({type: ORDER_DELIVER_RESET});\r\n      dispatch(getOrderDetails(id));\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript();\r\n      } else {\r\n        setSdkReady(true);\r\n      }\r\n    }\r\n  }, [dispatch, id, successPay, successDeliver, order]);\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult);\r\n    dispatch(payOrder(id, paymentResult));\r\n  };\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order));\r\n  };\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message variant=\"danger\">{error}</Message>\r\n  ) : (\r\n    <>\r\n      <h1>Order {order._id}</h1>\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong>Name: </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>{\" \"}\r\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n              </p>\r\n              <p>\r\n                <strong>Address:</strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city}{\" \"}\r\n                {order.shippingAddress.postalCode},{\" \"}\r\n                {order.shippingAddress.country}\r\n              </p>\r\n              {order.isDelivered ? (\r\n                <Message variant=\"success\">\r\n                  Delivered on {order.deliveredAt}\r\n                </Message>\r\n              ) : (\r\n                <Message variant=\"danger\">Not Delivered</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Payment Method</h2>\r\n              <p>\r\n                <strong>Method: </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n              {order.isPaid ? (\r\n                <Message variant=\"success\">Paid on {order.paidAt}</Message>\r\n              ) : (\r\n                <Message variant=\"danger\">Not Paid</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant=\"flush\">\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>${order.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>${order.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>${order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>${order.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo &&\r\n                userInfo.isAdmin &&\r\n                order.isPaid &&\r\n                !order.isDelivered && (\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type=\"button\"\r\n                      className=\"btn btn-block\"\r\n                      onClick={deliverHandler}\r\n                    >\r\n                      Mark Ad delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderScreen;\r\n","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\UserListScreen.js",["210"],"import React, { useEffect } from 'react'\r\nimport { Link,useNavigate } from 'react-router-dom'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\nconst UserListScreen = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const userList = useSelector((state) => state.userList)\r\n  const { loading, error, users } = userList\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userDelete = useSelector((state) => { \r\n    console.log(state);\r\n    return state.userDelete\r\n  })\r\n  console.log(userDelete)\r\n  const { success: successDelete } = userDelete\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listUsers())\r\n    } else {\r\n      navigate('/login')\r\n    }\r\n  }, [dispatch,successDelete,userInfo])\r\n\r\n  const deleteHandler = (id) => {\r\n    if (window.confirm('Are you sure')) {\r\n      dispatch(deleteUser(id))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Users</h1>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <Table striped bordered hover responsive className='table-sm'>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>NAME</th>\r\n              <th>EMAIL</th>\r\n              <th>ADMIN</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {users.map((user) => (\r\n              <tr key={user._id}>\r\n                <td>{user._id}</td>\r\n                <td>{user.name}</td>\r\n                <td>\r\n                  <a href={`mailto:${user.email}`}>{user.email}</a>\r\n                </td>\r\n                <td>\r\n                  {user.isAdmin ? (\r\n                    <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                  ) : (\r\n                    <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  <Link to={`/admin/user/${user._id}/edit`}>\r\n                    <Button variant='light' className='btn-sm'>\r\n                      <i className='fas fa-edit'></i>\r\n                    </Button>\r\n                  </Link>\r\n                  <Button\r\n                    variant='danger'\r\n                    className='btn-sm'\r\n                    onClick={() => deleteHandler(user._id)}\r\n                  >\r\n                    <i className='fas fa-trash'></i>\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserListScreen","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\UserEditScreen.js",["211"],"import React, { useState, useEffect } from 'react'\r\nimport { Link,useParams,useNavigate} from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nconst UserEditScreen = ({ match, history }) => {\r\n  const {id} = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n        dispatch({ type: USER_UPDATE_RESET })\r\n        navigate('/admin/userlist')\r\n      } else {\r\n        if (!user.name || user._id !== id) {\r\n          dispatch(getUserDetails(id))\r\n        } else {\r\n          setName(user.name)\r\n          setEmail(user.email)\r\n          setIsAdmin(user.isAdmin)\r\n        }\r\n      }\r\n    }, [dispatch, id, user, successUpdate])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateUser({ _id: id, name, email, isAdmin }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Link to='/admin/userlist' className='btn btn-light my-3'>\r\n        Go Back\r\n      </Link>\r\n      <FormContainer>\r\n        <h1>Edit User</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant='danger'>{error}</Message>\r\n        ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='isadmin'>\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n\r\n            <Button type='submit' variant='primary'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProductListScreen.js",["212","213","214"],"import React, {useEffect} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {Table, Button, Row, Col} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\nimport {listProducts, deleteProduct, createProduct} from \"../actions/productActions\";\r\nimport process from '../config';\r\nimport {PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_RESET} from '../constants/productConstants';\r\n\r\nconst ProductListScreen = ({history, match}) => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const productList = useSelector((state) => state.productList);\r\n  const {loading, error, products} = productList;\r\n\r\n  const productDelete = useSelector((state) => state.productDelete);\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete;\r\n\r\n  const productCreate = useSelector((state) => state.productCreate);\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct\r\n  } = productCreate;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const {userInfo} = userLogin;\r\n\r\n  useEffect(() => {\r\n    dispatch ({ type: PRODUCT_CREATE_RESET})\r\n    if (!userInfo.isAdmin) {\r\n      navigate(\"/login\");\r\n    } \r\n    if (successCreate){\r\n      navigate(`/admin/product/${createdProduct._id}/edit`)\r\n    }\r\n    else{\r\n      dispatch(listProducts())\r\n    }\r\n  }, [dispatch, userInfo, successDelete, successCreate, createdProduct]);\r\n\r\n  const deleteHandler = (id) => {\r\n    if (window.confirm(\"Are you sure\")) {\r\n      dispatch(deleteProduct(id));\r\n    }\r\n  };\r\n\r\n  const createProductHandler = () => {\r\n    dispatch(createProduct())\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"align-items-center\">\r\n        <Col>\r\n          <h1>Products</h1>\r\n        </Col>\r\n        <Col className=\"text-right\">\r\n          <Button className=\"my-3\" onClick={createProductHandler}>\r\n            <i className=\"fas fa-plus\"></i> Create Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {loadingDelete && <Loader />}\r\n      {errorDelete && <Message variant=\"danger\">{errorDelete}</Message>}\r\n      {loadingCreate && <Loader />}\r\n      {errorCreate && <Message variant=\"danger\">{errorCreate}</Message>}\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) : (\r\n        <Table striped bordered hover responsive className=\"table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>NAME</th>\r\n              <th>PRICE</th>\r\n              <th>CATEGORY</th>\r\n              <th>BRAND</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {products.map((product) => (\r\n              <tr key={product._id}>\r\n                <td>{product._id}</td>\r\n                <td>{product.name}</td>\r\n                <td>${product.price}</td>\r\n                <td>{product.category}</td>\r\n                <td>{product.brand}</td>\r\n                <td>\r\n                  <Link to={`/admin/product/${product._id}/edit`}>\r\n                    <Button variant=\"light\" className=\"btn-sm\">\r\n                      <i className=\"fas fa-edit\"></i>\r\n                    </Button>\r\n                  </Link>\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    className=\"btn-sm\"\r\n                    onClick={() => deleteHandler(product._id)}\r\n                  >\r\n                    <i className=\"fas fa-trash\"></i>\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductListScreen;\r\n","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\ProductEditScreen.js",["215"],"import axios from 'axios'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link,useParams,useNavigate} from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\nimport process from '../config';\r\n\r\nconst ProductEditScreen = ({ history }) => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      navigate('/admin/productlist')\r\n    } else {\r\n      if (!product) {\r\n        dispatch(listProductDetails(id))\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInSock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, id, product, successUpdate])\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post(`${process.env.API_URL}/api/upload`, formData, config)\r\n      console.log(data);\r\n      setImage(data.split('\\\\').join('/'))\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(\r\n      updateProduct({\r\n        _id: id,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <Link to='/admin/productlist' className='btn btn-light my-3'>\r\n        Go Back\r\n      </Link>\r\n      <FormContainer>\r\n        <h1>Edit Product</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant='danger'>{error}</Message>\r\n         ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n             <Form.Group controlId='price'>\r\n              <Form.Label>Price</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter price'\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control> \r\n            </Form.Group>\r\n             <Form.Group controlId='image'>\r\n              <Form.Label>Image</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter image url'\r\n                value={image}\r\n                onChange={(e) => {\r\n                  console.log(e)\r\n                  return setImage(e.target.value)\r\n                }}\r\n              ></Form.Control>\r\n              \r\n              <Form.Group\r\n               \r\n              \r\n                \r\n              >\r\n                <Form.Control type=\"file\" onChange={uploadFileHandler}   label='Choose File'  id='image-file'/>\r\n              </Form.Group>\r\n              {uploading && <Loader />}\r\n            </Form.Group>  \r\n\r\n            <Form.Group controlId='brand'>\r\n              <Form.Label>Brand</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter brand'\r\n                value={brand}\r\n                onChange={(e) => setBrand(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='countInStock'>\r\n              <Form.Label>Count In Stock</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter countInStock'\r\n                value={countInStock}\r\n                onChange={(e) => setCountInStock(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='category'>\r\n              <Form.Label>Category</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter category'\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='description'>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter description'\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Button type='submit' variant='primary'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\nexport default ProductEditScreen","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\screens\\OrderListScreen.js",["216"],"import React, {useEffect} from \"react\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {Table, Button} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\nimport {listOrders} from \"../actions/orderAction\";\r\n\r\nconst OrderListScreen = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const orderList = useSelector((state) => state.orderList);\r\n  const {loading, error, orders} = orderList;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const {userInfo} = userLogin;\r\n\r\n  useEffect(() => {\r\n    if (userInfo && userInfo.isAdmin) {\r\n      dispatch(listOrders());\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [dispatch, userInfo]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Orders</h1>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) : (\r\n        <Table striped bordered hover responsive className=\"table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>USER</th>\r\n              <th>DATE</th>\r\n              <th>TOTAL</th>\r\n              <th>PAID</th>\r\n              <th>DELIVERED</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {orders.map((order) => (\r\n              \r\n              <tr key={order._id}>\r\n                <td>{order._id}</td>\r\n                <td>{order.user && order.user.name}</td>\r\n                <td>{order.createdAt.substring(0, 10)}</td>\r\n                <td>${order.totalPrice}</td>\r\n                <td>\r\n                  {order.isPaid ? (\r\n                    order.paidAt.substring(0, 10)\r\n                  ) : (\r\n                    <i className=\"fas fa-times\" style={{color: \"red\"}}></i>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {order.isDelivered ? (\r\n                    order.deliveredAt.substring(0, 10)\r\n                  ) : (\r\n                    <i className=\"fas fa-times\" style={{color: \"red\"}}></i>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  <Link to={`/admin/order/${order._id}/edit`}>\r\n                    <Button variant=\"light\" className=\"btn-sm\">\r\n                      Details\r\n                    </Button>\r\n                  </Link>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderListScreen;\r\n","C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\ProductCarousel.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\components\\Meta.js",[],"C:\\Users\\Keval Patel\\Desktop\\SPortizen\\frontend\\src\\config.js",["217"],"export default process = {\r\n    env: {\r\n        API_URL: ''\r\n    }\r\n};",{"ruleId":"218","severity":1,"message":"219","line":2,"column":10,"nodeType":"220","messageId":"221","endLine":2,"endColumn":14},{"ruleId":"218","severity":1,"message":"222","line":3,"column":10,"nodeType":"220","messageId":"221","endLine":3,"endColumn":16},{"ruleId":"223","severity":1,"message":"224","line":30,"column":8,"nodeType":"225","endLine":30,"endColumn":37,"suggestions":"226"},{"ruleId":"218","severity":1,"message":"227","line":238,"column":13,"nodeType":"220","messageId":"221","endLine":238,"endColumn":17},{"ruleId":"228","severity":1,"message":"229","line":11,"column":25,"nodeType":"230","messageId":"231","endLine":11,"endColumn":29},{"ruleId":"223","severity":1,"message":"224","line":31,"column":6,"nodeType":"225","endLine":31,"endColumn":26,"suggestions":"232"},{"ruleId":"218","severity":1,"message":"233","line":3,"column":40,"nodeType":"220","messageId":"221","endLine":3,"endColumn":49},{"ruleId":"228","severity":1,"message":"229","line":11,"column":24,"nodeType":"230","messageId":"231","endLine":11,"endColumn":26},{"ruleId":"218","severity":1,"message":"234","line":12,"column":9,"nodeType":"220","messageId":"221","endLine":12,"endColumn":17},{"ruleId":"223","severity":1,"message":"224","line":46,"column":6,"nodeType":"225","endLine":46,"endColumn":32,"suggestions":"235"},{"ruleId":"228","severity":1,"message":"229","line":9,"column":25,"nodeType":"230","messageId":"231","endLine":9,"endColumn":29},{"ruleId":"218","severity":1,"message":"236","line":60,"column":9,"nodeType":"220","messageId":"221","endLine":60,"endColumn":26},{"ruleId":"223","severity":1,"message":"237","line":77,"column":6,"nodeType":"225","endLine":77,"endColumn":55,"suggestions":"238"},{"ruleId":"223","severity":1,"message":"224","line":32,"column":6,"nodeType":"225","endLine":32,"endColumn":39,"suggestions":"239"},{"ruleId":"223","severity":1,"message":"224","line":43,"column":8,"nodeType":"225","endLine":43,"endColumn":43,"suggestions":"240"},{"ruleId":"218","severity":1,"message":"241","line":8,"column":8,"nodeType":"220","messageId":"221","endLine":8,"endColumn":15},{"ruleId":"218","severity":1,"message":"242","line":9,"column":9,"nodeType":"220","messageId":"221","endLine":9,"endColumn":31},{"ruleId":"223","severity":1,"message":"224","line":47,"column":6,"nodeType":"225","endLine":47,"endColumn":72,"suggestions":"243"},{"ruleId":"223","severity":1,"message":"224","line":53,"column":6,"nodeType":"225","endLine":53,"endColumn":44,"suggestions":"244"},{"ruleId":"223","severity":1,"message":"224","line":25,"column":6,"nodeType":"225","endLine":25,"endColumn":26,"suggestions":"245"},{"ruleId":"246","severity":1,"message":"247","line":1,"column":16,"nodeType":"220","messageId":"248","endLine":1,"endColumn":23},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Helmet' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["249"],"'data' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["250"],"'ListGroup' is defined but never used.","'location' is assigned a value but never used.",["251"],"'placeOrderHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["252"],["253"],["254"],"'process' is defined but never used.","'PRODUCT_CREATE_REQUEST' is defined but never used.",["255"],["256"],["257"],"no-native-reassign","Read-only global 'process' should not be modified.","nativeReassign",{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},"Update the dependencies array to be: [history, userInfo, redirect, navigate]",{"range":"276","text":"277"},"Update the dependencies array to be: [userInfo, redirect, navigate]",{"range":"278","text":"279"},"Update the dependencies array to be: [dispatch, userInfo, user, navigate]",{"range":"280","text":"281"},"Update the dependencies array to be: [dispatch, id, successPay, successDeliver, order, userInfo, history]",{"range":"282","text":"283"},"Update the dependencies array to be: [dispatch, navigate, successDelete, userInfo]",{"range":"284","text":"285"},"Update the dependencies array to be: [dispatch, id, user, successUpdate, navigate]",{"range":"286","text":"287"},"Update the dependencies array to be: [dispatch, userInfo, successDelete, successCreate, createdProduct, navigate]",{"range":"288","text":"289"},"Update the dependencies array to be: [dispatch, id, navigate, product, successUpdate]",{"range":"290","text":"291"},"Update the dependencies array to be: [dispatch, navigate, userInfo]",{"range":"292","text":"293"},[996,1025],"[history, userInfo, redirect, navigate]",[1095,1115],"[userInfo, redirect, navigate]",[1653,1679],"[dispatch, userInfo, user, navigate]",[2467,2516],"[dispatch, id, successPay, successDeliver, order, userInfo, history]",[991,1024],"[dispatch, navigate, successDelete, userInfo]",[1449,1484],"[dispatch, id, user, successUpdate, navigate]",[1537,1603],"[dispatch, userInfo, successDelete, successCreate, createdProduct, navigate]",[1920,1958],"[dispatch, id, navigate, product, successUpdate]",[800,820],"[dispatch, navigate, userInfo]"]